y = c(CI_Neo[1,],rev(CI_Neo[2,])),
col = adjustcolor("darkslategray4", alpha.f = 0.3), border = NA)
lines(Maxmin_Neo[1,], col = "darkslategray4", lwd = 0.7, lty = 3)
lines(Maxmin_Neo[2,], col = "darkslategray4", lwd = 0.7, lty = 3)
lines(Neo_spd$grid$PrDens, col = "darkslategray4", lwd = 1.5)
polygon(x=c(c(0:(length(CI_Meso[1,])-1)),c((length(CI_Meso[1,])-1):0)),
y = c(CI_Meso[1,],rev(CI_Meso[2,])),
col = adjustcolor("brown4", alpha.f = 0.3), border = NA)
lines(Maxmin_Meso[1,], col = "brown4", lwd = 0.7, lty = 3)
lines(Maxmin_Meso[2,], col = "brown4", lwd = 0.7, lty = 3)
lines(Meso_spd$grid$PrDens, col = "brown4", lwd = 1.5)
plot(model_list[[1]][[1]][,3]/max(model_list[[1]][[1]][,3]), ylim = c(0,1),
col = adjustcolor("darkslategray4", alpha.f = 0.05), type = "l",
ylab = "Population density", xlab = "Time", main = "Population")
for (i in 2:500){
lines(model_list[[i]][[1]][,3]/max(model_list[[i]][[1]][,3]),
col = adjustcolor("darkslategray4", alpha.f = 0.05), type = "l")
}
for (i in 1:500){
lines(model_list[[i]][[1]][,2]/max(model_list[[i]][[1]][,3]),
col = adjustcolor("brown4", alpha.f = 0.05), type = "l")
}
}
dev.off()
################################################################################
#####################             END FIG. 3            ########################
################################################################################
################################################################################
#####################               FIG. 4              ########################
################################################################################
## Prepare utilities
params_Ib <- data.frame("Dm" = sapply(model_list_Ib, function(x) x[[2]]$Dm),
"Gm" = sapply(model_list_Ib, function(x) x[[2]]$Gm),
"Dn" = sapply(model_list_Ib, function(x) x[[2]]$Dn),
"Gn" = sapply(model_list_Ib, function(x) x[[2]]$Gn),
"e" = sapply(model_list_Ib, function(x) x[[2]]$e),
"m" = sapply(model_list_Ib, function(x) x[[2]]$m))
params_Ib$Gn <- params_Ib$Gn+params_Ib$m
params_Ja <- data.frame("Dm" = sapply(model_list_Ja, function(x) x[[2]]$Dm),
"Gm" = sapply(model_list_Ja, function(x) x[[2]]$Gm),
"Dn" = sapply(model_list_Ja, function(x) x[[2]]$Dn),
"Gn" = sapply(model_list_Ja, function(x) x[[2]]$Gn),
"e" = sapply(model_list_Ja, function(x) x[[2]]$e),
"m" = sapply(model_list_Ja, function(x) x[[2]]$m))
params_Ja$Gn <- params_Ja$Gn+params_Ja$m
params_De <- data.frame("Dm" = sapply(model_list_De, function(x) x[[2]]$Dm),
"Gm" = sapply(model_list_De, function(x) x[[2]]$Gm),
"Dn" = sapply(model_list_De, function(x) x[[2]]$Dn),
"Gn" = sapply(model_list_De, function(x) x[[2]]$Gn),
"e" = sapply(model_list_De, function(x) x[[2]]$e),
"m" = sapply(model_list_De, function(x) x[[2]]$m))
params_De$Gn <- params_De$Gn+params_De$m
# Index to select parameters
sel_par <- c("Dm","Gm","Dn","Gn","e")
## To assign names with math letters
nameDm <- expression(paste(delta["hg"]))
nameGm <- expression(paste(gamma["hg"]))
nameDn <- expression(paste(delta["f"]))
nameGn <- expression(paste(gamma["'f"]))
namee <- expression(eta)
#tiff("./Figures/Fig_4.tiff", width = 1000, height = 700)
png("./Figures/Fig_4.png", width = 1000, height = 700)
par(mfrow = c(2,3))
## Prepare density for legend
normdens <- density(rnorm(10000,32,0.5), bw = 4)
plot(x=normdens$x,y=normdens$y/max(normdens$y)+5, type = "l", ylim = c(1,7.5), xlim = c(0,50),
col = "white", axes = FALSE, ylab = "", xlab = "")
polygon(normdens$x,normdens$y/max(normdens$y)+5, col = adjustcolor("mediumorchid4", alpha.f = 0.6), border = "gray")
polygon(normdens$x,normdens$y/max(normdens$y)+3, col = adjustcolor("cadetblue3", alpha.f = 0.6), border = "gray")
polygon(normdens$x,normdens$y/max(normdens$y)+1, col = adjustcolor("sienna4", alpha.f = 0.6), border = "gray")
mtext("Denmark", 2, at = 5.5, las = 2, line = -4.5, col = "gray25", cex = 1.6, font = 2)
mtext("Iberia", 2, at = 3.5, las = 2, line = -4.5, col = "gray25", cex = 1.6, font = 2)
mtext("Japan", 2, at = 1.5, las = 2, line = -4.5, col = "gray25", cex = 1.6, font = 2)
for (i in 1:5){
parDe <- params_De[,i]
parIb <- params_Ib[,i]
parJa <- params_Ja[,i]
## To automatically create ylimit depending on the area
ylobj <- c(parDe,parIb,parJa)
yl <- max(ylobj) + (max(ylobj)-quantile(max(ylobj))[2])
## Arrange data to plot distributions
## Denmark
dens_parDe <- density(parDe)
dens_parDe <- data.frame("x" = dens_parDe$x,
"y" = dens_parDe$y)
dens_parDe$y <- scales::rescale(dens_parDe$y, to = c(0,max(parDe)/5))
dens_parDe$x <- scales::rescale(dens_parDe$x, to = c(1.2,2.8))
## Iberia
dens_parIb <- density(parIb)
dens_parIb <- data.frame("x" = dens_parIb$x,
"y" = dens_parIb$y)
dens_parIb$y <- scales::rescale(dens_parIb$y, to = c(0,max(parIb)/5))
dens_parIb$x <- scales::rescale(dens_parIb$x, to = c(3.2,4.8))
## Japan
dens_parJa <- density(parJa)
dens_parJa <- data.frame("x" = dens_parJa$x,
"y" = dens_parJa$y)
dens_parJa$y <- scales::rescale(dens_parJa$y, to = c(0,max(parJa)/5))
dens_parJa$x <- scales::rescale(dens_parJa$x, to = c(5.2,6.8))
# Common parameters
peach <- 21
alph <- 0.6
cexx <- 0.8
set.seed(1)
## Create structure and background
plot(x = c(1,7), y = c(0,0), type = "l", col = "gray", lwd = 0, axes = FALSE, ylab = "Density", xlab = "",
ylim = c(0,yl))
line_bg <- axis(2, tck = -0.015)
abline(h=line_bg,col = "gray",lwd = 0.5)
title(get(paste0("name",sel_par[i])))
## Plot distributions
## Denmark
points(x = rnorm(length(parDe),2,0.2), parDe, col = adjustcolor("black", alpha.f = alph),
pch = peach, cex = cexx, bg = adjustcolor("mediumorchid4", alpha.f = alph))
polygon(dens_parDe$x,dens_parDe$y, col = adjustcolor("mediumorchid4", alpha.f = 0.6), border = "gray")
segments(x1 = 1, y1 = median(parDe),x0 = 3, y0 = median(parDe), col = "red", lty = 2, lwd = 1.2)
## Iberia
points(x = rnorm(length(parIb),4,0.2), parIb, col = adjustcolor("black", alpha.f = alph), pch = peach, cex = cexx,
bg = adjustcolor("cadetblue3", alpha.f = alph))
polygon(dens_parIb$x,dens_parIb$y, col = adjustcolor("cadetblue3", alpha.f = 0.6), border = "gray")
segments(x1 = 3, y1 = median(parIb),x0 = 5, y0 = median(parIb), col = "red", lty = 2, lwd = 1.2)
## Japan
points(x = rnorm(length(parJa),6,0.2), parJa, col = adjustcolor("black", alpha.f = alph), pch = peach, cex = cexx,
bg = adjustcolor("sienna4", alpha.f = alph))
polygon(dens_parJa$x,dens_parJa$y, col = adjustcolor("sienna4", alpha.f = 0.6), border = "gray")
segments(x1 = 5, y1 = median(parJa),x0 = 7, y0 = median(parJa), col = "red", lty = 2, lwd = 1.2)
}
dev.off()
################################################################################
#####################             END FIG. 4            ########################
################################################################################
################################################################################
#####################           FIG. METHODS 1          ########################
################################################################################
methds1 <- readRDS("./Data/pars_lilower0_lihigher0.rds")
out <- data.frame(LotVolme(methds1, times = c(1:600)))
#tiff("./Figures/Fig_m1.tiff", width = 1000, height = 700)
png("./Figures/Fig_m1.png", width = 1000, height = 700)
plot(out[,2], type = "l", ylim = c(0,max(out[,3])), col = "black", lwd = 1.5,
ylab = "Population", xlab = "time", main = expression(paste(lambda["1"]," < 0 and ", lambda["2"], " > 0")))
lines(out[,3], col = "red", lwd = 1.5)
dev.off
################################################################################
#####################         END FIG. METHODS 1        ########################
################################################################################
################################################################################
#####################           FIG. METHODS 2          ########################
################################################################################
methds2 <- readRDS("./Data/pars_lilower0_lilower0.rds")
out <- data.frame(LotVolme(methds2, times = c(1:600)))
#tiff("./Figures/Fig_m2.tiff", width = 1000, height = 700)
png("./Figures/Fig_m2.png", width = 1000, height = 700)
plot(out[,2], type = "l", ylim = c(0,max(out[,3])), col = "black", lwd = 1.5,
ylab = "Population", xlab = "time", main = expression(paste(lambda["1"]," < 0 and ", lambda["2"], " < 0")))
lines(out[,3], col = "red", lwd = 1.5)
dev.off
################################################################################
#####################         END FIG. METHODS 2        ########################
################################################################################
plot(out[,2], type = "l", ylim = c(0,max(out[,3])), col = "black", lwd = 1.5,
ylab = "Population", xlab = "time", main = expression(paste(lambda["1"]," < 0 and ", lambda["2"], " < 0")))
plot(out[,2], type = "l", ylim = c(0,max(out[,2])), col = "black", lwd = 1.5,
ylab = "Population", xlab = "time", main = expression(paste(lambda["1"]," < 0 and ", lambda["2"], " < 0")))
plot(out[,3], type = "l", ylim = c(0,max(out[,2])), col = "black", lwd = 1.5,
ylab = "Population", xlab = "time", main = expression(paste(lambda["1"]," < 0 and ", lambda["2"], " < 0")))
out <- data.frame(LotVolme(methds2, times = c(1:600)))
plot(out[,3], type = "l", ylim = c(0,max(out[,2])), col = "black", lwd = 1.5,
ylab = "Population", xlab = "time", main = expression(paste(lambda["1"]," < 0 and ", lambda["2"], " < 0")))
plot(out[,2], type = "l", ylim = c(0,max(out[,2])), col = "black", lwd = 1.5,
ylab = "Population", xlab = "time", main = expression(paste(lambda["1"]," < 0 and ", lambda["2"], " < 0")))
plot(out[,2], type = "l", ylim = c(0,max(out[,3])), col = "black", lwd = 1.5,
ylab = "Population", xlab = "time", main = expression(paste(lambda["1"]," < 0 and ", lambda["2"], " < 0")))
plot(out[,2])
plot(out[,3])
dev.off()
plot(out[,3])
plot(out[,2], type = "l", ylim = c(0,max(out[,2])), col = "black", lwd = 1.5,
ylab = "Population", xlab = "time", main = expression(paste(lambda["1"]," < 0 and ", lambda["2"], " < 0")))
lines(out[,3], col = "red", lwd = 1.5)
#### FIGURES
## Load data and functions
source("Scripts/01_Functions.R")
source("Scripts/Data_for_plots.R")
################################################################################
#####################               FIG. 2              ########################
################################################################################
## Total number of dates
Tot_dates <- Neo_spd_sim$metadata$ndates + Meso_spd_sim$metadata$ndates
## Extract densities
Dens_Neo <- sapply(fit_list_sim, function(x) x[[3]]$grid$PrDens)
Dens_Meso <- sapply(fit_list_sim, function(x) x[[2]]$grid$PrDens)
## Extract credible intervals
CI_Neo <- apply(Dens_Neo,1,credint)
CI_Meso <- apply(Dens_Meso,1,credint)
## Extract max min vals
Maxmin_Neo <- apply(Dens_Neo,1,maxmin)
Maxmin_Meso <- apply(Dens_Meso,1,maxmin)
## Plot figure
#tiff("./Figures/Fig_2.tiff", width = 1000, height = 700)
png("./Figures/Fig_2.png", width = 1000, height = 700)
mat_layout <- matrix(c(rep(1,6),seq(2,7)),byrow = TRUE,nrow = 4)
layout(mat_layout)
plot(Neo_spd_sim$grid$PrDens, type = "l", lwd = 0.1, xlab = "Years BP", ylab = "Density",
xaxt = "n", xlim = c(0,(length(CI_Meso[1,])-1)), main = "Simulated",
ylim = c(0,max(Maxmin_Neo[2,])))
axis(1,labels = c(Neo_spd_sim$grid$calBP[1],
Neo_spd_sim$grid$calBP[1]-200,
Neo_spd_sim$grid$calBP[1]-400,
Neo_spd_sim$grid$calBP[1]-600,
Neo_spd_sim$grid$calBP[1]-800,
Neo_spd_sim$grid$calBP[1]-1000), at = c(0,200,400,600,800,1000))
axis(3,labels = paste0("ndates = ", Tot_dates), at = 50, tick = F, font = 4)
polygon(x=c(c(0:(length(CI_Neo[1,])-1)),c((length(CI_Neo[1,])-1):0)),
y = c(CI_Neo[1,],rev(CI_Neo[2,])),
col = adjustcolor("steelblue4", alpha.f = 0.3), border = NA)
lines(Maxmin_Neo[1,], col = "steelblue4", lwd = 0.7, lty = 3)
lines(Maxmin_Neo[2,], col = "steelblue4", lwd = 0.7, lty = 3)
lines(Neo_spd_sim$grid$PrDens, col = "steelblue4", lwd = 1.5)
polygon(x=c(c(0:(length(CI_Meso[1,])-1)),c((length(CI_Meso[1,])-1):0)),
y = c(CI_Meso[1,],rev(CI_Meso[2,])),
col = adjustcolor("lightgoldenrod4", alpha.f = 0.3), border = NA)
lines(Maxmin_Meso[1,], col = "lightgoldenrod4", lwd = 0.7, lty = 3)
lines(Maxmin_Meso[2,], col = "lightgoldenrod4", lwd = 0.7, lty = 3)
lines(Meso_spd_sim$grid$PrDens, col = "lightgoldenrod4", lwd = 1.5)
################################################################################
################################################################################
################################################################################
## PARAMETERS
# Simulated parameters
params <- data.frame("Dm" = sapply(model_list_sim, function(x) x[[2]]$Dm),
"Gm" = sapply(model_list_sim, function(x) x[[2]]$Gm),
"Dn" = sapply(model_list_sim, function(x) x[[2]]$Dn),
"Gn" = sapply(model_list_sim, function(x) x[[2]]$Gn),
"e" = sapply(model_list_sim, function(x) x[[2]]$e),
"m" = sapply(model_list_sim, function(x) x[[2]]$m))
params$`'n` <- params$Gn+params$m
## Target parameters
Tact_pars <- c("Dm" = 0.002,
"Gm" = 0.002,
"Dn" = 0.0015,
"Gn" = 0.025,
"e" = 0.2,
"m" = 0.01,
"'n" = 0.035)
# Index to select parameters
sel_par <- c("Dm","Gm","Dn","Gn","e")
## To assign names with math letters
nameDm <- expression(paste(delta["hg"]))
nameGm <- expression(paste(gamma["hg"]))
nameDn <- expression(paste(delta["f"]))
nameGn <- expression(paste(gamma["'f"]))
namee <- expression(eta)
#par(mfrow = c(2,3))
for (i in 1:5){
Dens <- density(params[,sel_par[i]], adjust = 2)
Dens_credint_95 <- credint(params[,sel_par[i]])
Dens_credint_95_range <- Dens$x > Dens_credint_95[1] & Dens$x < Dens_credint_95[2]
Dens_credint_80 <- credint(params[,sel_par[i]], lev = 0.8)
Dens_credint_80_range <- Dens$x > Dens_credint_80[1] & Dens$x < Dens_credint_80[2]
plot(Dens, lwd = 0.1, main = get(paste0("name",sel_par[i])), xlab = "value",
ylim = c(0,max(Dens$y)+5))
polygon(c(Dens_credint_95[1], Dens$x[Dens_credint_95_range], Dens_credint_95[2]),
c(0, Dens$y[Dens_credint_95_range],0),
col = adjustcolor("steelblue4", alpha.f = 0.5), border = "black", lty = 3,
lwd = 0.5)
polygon(c(Dens_credint_80[1], Dens$x[Dens_credint_80_range], Dens_credint_80[2]),
c(0, Dens$y[Dens_credint_80_range],0),
col = adjustcolor("steelblue", alpha.f = 0.5), border = "black", lty = 3,
lwd = 0.5)
abline(v=Tact_pars[sel_par[i]], lty = 3, col = "black", lwd = 0.8)
abline(v=mean(params[,sel_par[i]]), lty = 3, col = "red", lwd = 0.8)
}
## To report if needed
means_params <- c("Dm" = mean(params$Dm),
"Gm" = mean(params$Gm),
"Dn" = mean(params$Dn),
"Gn" = mean(params$Gn),
"e" = mean(params$e),
"m" = mean(params$m),
"'n" = mean(params$`'n`))
vars_params <- c("Dm" = var(params$Dm),
"Gm" = var(params$Gm),
"Dn" = var(params$Dn),
"Gn" = var(params$Gn),
"e" = var(params$e),
"m" = var(params$m),
"'n" = var(params$`'n`))
dev.off()
################################################################################
#####################             END FIG. 2            ########################
################################################################################
################################################################################
#####################               FIG. 3              ########################
################################################################################
## Create objects for plotting
## GENERAL
## Define x axis ticks for SPDs
plot_ticks <- list("Iberia" = data.frame("Year" = c(Neo_spd_Ib$grid$calBP[1]-2,
Neo_spd_Ib$grid$calBP[1]-202,
Neo_spd_Ib$grid$calBP[1]-402,
Neo_spd_Ib$grid$calBP[1]-602,
Neo_spd_Ib$grid$calBP[1]-802,
Neo_spd_Ib$grid$calBP[1]-1002),
"Position" =  c(2,202,402,602,802,1002)),
"Denmark" = data.frame("Year" = c(Neo_spd_Ja$grid$calBP[1],
Neo_spd_Ja$grid$calBP[1]-200,
Neo_spd_Ja$grid$calBP[1]-400,
Neo_spd_Ja$grid$calBP[1]-600,
Neo_spd_Ja$grid$calBP[1]-800,
Neo_spd_Ja$grid$calBP[1]-1000),
"Position" =  c(0,200,400,600,800,1000)),
"Denmark" = data.frame("Year" = c(Neo_spd_De$grid$calBP[1]+5,
Neo_spd_De$grid$calBP[1]-195,
Neo_spd_De$grid$calBP[1]-395,
Neo_spd_De$grid$calBP[1]-595,
Neo_spd_De$grid$calBP[1]-795,
Neo_spd_De$grid$calBP[1]-995),
"Position" =  c(-5,195,395,595,795,995)))
#tiff("./Figures/Fig_3.tiff", width = 1000, height = 700)
png("./Figures/Fig_3.png", width = 1000, height = 700)
## Layout parameters
mat_plot <- matrix(c(1,1,2,3,3,4,5,5,6), nrow = 3, byrow = TRUE)
layout(mat_plot)
## Index for plot loop
Ind <- c("Ib","Ja","De")
areas <- c("Iberia","Japan","Denmark")
## Start loop
for (j in 1:length(Ind)){
## Create objects for plotting
## Assign specific object (Ib, Ja, De) to common value for loop
Neo_spd <- get(paste0("Neo_spd_",Ind[j]))
Meso_spd <- get(paste0("Meso_spd_",Ind[j]))
fit_list <- get(paste0("fit_list_",Ind[j]))
model_list <- get(paste0("model_list_",Ind[j]))
area <- areas[j]
## Extract densities
Dens_Neo <- sapply(fit_list, function(x) x[[3]]$grid$PrDens)
Dens_Meso <- sapply(fit_list, function(x) x[[2]]$grid$PrDens)
## Extract credible intervals
CI_Neo <- apply(Dens_Neo,1,credint)
CI_Meso <- apply(Dens_Meso,1,credint)
## Extract max min vals
Maxmin_Neo <- apply(Dens_Neo,1,maxmin)
Maxmin_Meso <- apply(Dens_Meso,1,maxmin)
##################
###### Plot starts
##################
plot(Neo_spd$grid$PrDens, type = "l", lwd = 0.1, xlab = "Years BP", ylab = "Radiocarbon density",
xaxt = "n", xlim = c(0,(length(CI_Meso[1,])-1)), main = "SPD",
ylim = c(0,max(Maxmin_Neo[2,])))
axis(1,labels = plot_ticks[[j]]$Year, at = plot_ticks[[j]]$Position)
legend("topleft", area[1], bty = "n", text.font = 4)
polygon(x=c(c(0:(length(CI_Neo[1,])-1)),c((length(CI_Neo[1,])-1):0)),
y = c(CI_Neo[1,],rev(CI_Neo[2,])),
col = adjustcolor("darkslategray4", alpha.f = 0.3), border = NA)
lines(Maxmin_Neo[1,], col = "darkslategray4", lwd = 0.7, lty = 3)
lines(Maxmin_Neo[2,], col = "darkslategray4", lwd = 0.7, lty = 3)
lines(Neo_spd$grid$PrDens, col = "darkslategray4", lwd = 1.5)
polygon(x=c(c(0:(length(CI_Meso[1,])-1)),c((length(CI_Meso[1,])-1):0)),
y = c(CI_Meso[1,],rev(CI_Meso[2,])),
col = adjustcolor("brown4", alpha.f = 0.3), border = NA)
lines(Maxmin_Meso[1,], col = "brown4", lwd = 0.7, lty = 3)
lines(Maxmin_Meso[2,], col = "brown4", lwd = 0.7, lty = 3)
lines(Meso_spd$grid$PrDens, col = "brown4", lwd = 1.5)
plot(model_list[[1]][[1]][,3]/max(model_list[[1]][[1]][,3]), ylim = c(0,1),
col = adjustcolor("darkslategray4", alpha.f = 0.05), type = "l",
ylab = "Population density", xlab = "Time", main = "Population")
for (i in 2:500){
lines(model_list[[i]][[1]][,3]/max(model_list[[i]][[1]][,3]),
col = adjustcolor("darkslategray4", alpha.f = 0.05), type = "l")
}
for (i in 1:500){
lines(model_list[[i]][[1]][,2]/max(model_list[[i]][[1]][,3]),
col = adjustcolor("brown4", alpha.f = 0.05), type = "l")
}
}
dev.off()
################################################################################
#####################             END FIG. 3            ########################
################################################################################
################################################################################
#####################               FIG. 4              ########################
################################################################################
## Prepare utilities
params_Ib <- data.frame("Dm" = sapply(model_list_Ib, function(x) x[[2]]$Dm),
"Gm" = sapply(model_list_Ib, function(x) x[[2]]$Gm),
"Dn" = sapply(model_list_Ib, function(x) x[[2]]$Dn),
"Gn" = sapply(model_list_Ib, function(x) x[[2]]$Gn),
"e" = sapply(model_list_Ib, function(x) x[[2]]$e),
"m" = sapply(model_list_Ib, function(x) x[[2]]$m))
params_Ib$Gn <- params_Ib$Gn+params_Ib$m
params_Ja <- data.frame("Dm" = sapply(model_list_Ja, function(x) x[[2]]$Dm),
"Gm" = sapply(model_list_Ja, function(x) x[[2]]$Gm),
"Dn" = sapply(model_list_Ja, function(x) x[[2]]$Dn),
"Gn" = sapply(model_list_Ja, function(x) x[[2]]$Gn),
"e" = sapply(model_list_Ja, function(x) x[[2]]$e),
"m" = sapply(model_list_Ja, function(x) x[[2]]$m))
params_Ja$Gn <- params_Ja$Gn+params_Ja$m
params_De <- data.frame("Dm" = sapply(model_list_De, function(x) x[[2]]$Dm),
"Gm" = sapply(model_list_De, function(x) x[[2]]$Gm),
"Dn" = sapply(model_list_De, function(x) x[[2]]$Dn),
"Gn" = sapply(model_list_De, function(x) x[[2]]$Gn),
"e" = sapply(model_list_De, function(x) x[[2]]$e),
"m" = sapply(model_list_De, function(x) x[[2]]$m))
params_De$Gn <- params_De$Gn+params_De$m
# Index to select parameters
sel_par <- c("Dm","Gm","Dn","Gn","e")
## To assign names with math letters
nameDm <- expression(paste(delta["hg"]))
nameGm <- expression(paste(gamma["hg"]))
nameDn <- expression(paste(delta["f"]))
nameGn <- expression(paste(gamma["'f"]))
namee <- expression(eta)
#tiff("./Figures/Fig_4.tiff", width = 1000, height = 700)
png("./Figures/Fig_4.png", width = 1000, height = 700)
par(mfrow = c(2,3))
## Prepare density for legend
normdens <- density(rnorm(10000,32,0.5), bw = 4)
plot(x=normdens$x,y=normdens$y/max(normdens$y)+5, type = "l", ylim = c(1,7.5), xlim = c(0,50),
col = "white", axes = FALSE, ylab = "", xlab = "")
polygon(normdens$x,normdens$y/max(normdens$y)+5, col = adjustcolor("mediumorchid4", alpha.f = 0.6), border = "gray")
polygon(normdens$x,normdens$y/max(normdens$y)+3, col = adjustcolor("cadetblue3", alpha.f = 0.6), border = "gray")
polygon(normdens$x,normdens$y/max(normdens$y)+1, col = adjustcolor("sienna4", alpha.f = 0.6), border = "gray")
mtext("Denmark", 2, at = 5.5, las = 2, line = -4.5, col = "gray25", cex = 1.6, font = 2)
mtext("Iberia", 2, at = 3.5, las = 2, line = -4.5, col = "gray25", cex = 1.6, font = 2)
mtext("Japan", 2, at = 1.5, las = 2, line = -4.5, col = "gray25", cex = 1.6, font = 2)
for (i in 1:5){
parDe <- params_De[,i]
parIb <- params_Ib[,i]
parJa <- params_Ja[,i]
## To automatically create ylimit depending on the area
ylobj <- c(parDe,parIb,parJa)
yl <- max(ylobj) + (max(ylobj)-quantile(max(ylobj))[2])
## Arrange data to plot distributions
## Denmark
dens_parDe <- density(parDe)
dens_parDe <- data.frame("x" = dens_parDe$x,
"y" = dens_parDe$y)
dens_parDe$y <- scales::rescale(dens_parDe$y, to = c(0,max(parDe)/5))
dens_parDe$x <- scales::rescale(dens_parDe$x, to = c(1.2,2.8))
## Iberia
dens_parIb <- density(parIb)
dens_parIb <- data.frame("x" = dens_parIb$x,
"y" = dens_parIb$y)
dens_parIb$y <- scales::rescale(dens_parIb$y, to = c(0,max(parIb)/5))
dens_parIb$x <- scales::rescale(dens_parIb$x, to = c(3.2,4.8))
## Japan
dens_parJa <- density(parJa)
dens_parJa <- data.frame("x" = dens_parJa$x,
"y" = dens_parJa$y)
dens_parJa$y <- scales::rescale(dens_parJa$y, to = c(0,max(parJa)/5))
dens_parJa$x <- scales::rescale(dens_parJa$x, to = c(5.2,6.8))
# Common parameters
peach <- 21
alph <- 0.6
cexx <- 0.8
set.seed(1)
## Create structure and background
plot(x = c(1,7), y = c(0,0), type = "l", col = "gray", lwd = 0, axes = FALSE, ylab = "Density", xlab = "",
ylim = c(0,yl))
line_bg <- axis(2, tck = -0.015)
abline(h=line_bg,col = "gray",lwd = 0.5)
title(get(paste0("name",sel_par[i])))
## Plot distributions
## Denmark
points(x = rnorm(length(parDe),2,0.2), parDe, col = adjustcolor("black", alpha.f = alph),
pch = peach, cex = cexx, bg = adjustcolor("mediumorchid4", alpha.f = alph))
polygon(dens_parDe$x,dens_parDe$y, col = adjustcolor("mediumorchid4", alpha.f = 0.6), border = "gray")
segments(x1 = 1, y1 = median(parDe),x0 = 3, y0 = median(parDe), col = "red", lty = 2, lwd = 1.2)
## Iberia
points(x = rnorm(length(parIb),4,0.2), parIb, col = adjustcolor("black", alpha.f = alph), pch = peach, cex = cexx,
bg = adjustcolor("cadetblue3", alpha.f = alph))
polygon(dens_parIb$x,dens_parIb$y, col = adjustcolor("cadetblue3", alpha.f = 0.6), border = "gray")
segments(x1 = 3, y1 = median(parIb),x0 = 5, y0 = median(parIb), col = "red", lty = 2, lwd = 1.2)
## Japan
points(x = rnorm(length(parJa),6,0.2), parJa, col = adjustcolor("black", alpha.f = alph), pch = peach, cex = cexx,
bg = adjustcolor("sienna4", alpha.f = alph))
polygon(dens_parJa$x,dens_parJa$y, col = adjustcolor("sienna4", alpha.f = 0.6), border = "gray")
segments(x1 = 5, y1 = median(parJa),x0 = 7, y0 = median(parJa), col = "red", lty = 2, lwd = 1.2)
}
dev.off()
################################################################################
#####################             END FIG. 4            ########################
################################################################################
################################################################################
#####################           FIG. METHODS 1          ########################
################################################################################
methds1 <- readRDS("./Data/pars_lilower0_lihigher0.rds")
out <- data.frame(LotVolme(methds1, times = c(1:600)))
#tiff("./Figures/Fig_m1.tiff", width = 1000, height = 700)
png("./Figures/Fig_m1.png", width = 1000, height = 700)
plot(out[,2], type = "l", ylim = c(0,max(out[,3])), col = "black", lwd = 1.5,
ylab = "Population", xlab = "time", main = expression(paste(lambda["1"]," < 0 and ", lambda["2"], " > 0")))
lines(out[,3], col = "red", lwd = 1.5)
dev.off()
################################################################################
#####################         END FIG. METHODS 1        ########################
################################################################################
################################################################################
#####################           FIG. METHODS 2          ########################
################################################################################
methds2 <- readRDS("./Data/pars_lilower0_lilower0.rds")
out <- data.frame(LotVolme(methds2, times = c(1:600)))
#tiff("./Figures/Fig_m2.tiff", width = 1000, height = 700)
png("./Figures/Fig_m2.png", width = 1000, height = 700)
plot(out[,2], type = "l", ylim = c(0,max(out[,2])), col = "black", lwd = 1.5,
ylab = "Population", xlab = "time", main = expression(paste(lambda["1"]," < 0 and ", lambda["2"], " < 0")))
lines(out[,3], col = "red", lwd = 1.5)
dev.off()
################################################################################
#####################         END FIG. METHODS 2        ########################
################################################################################
